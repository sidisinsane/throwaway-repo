---
// astro
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
// utils
import type { CollectionPaginationProps } from "../../lib/utils/index.ts";

// components
import Header from "../../components/Header.astro";
import EmbedCodepen from "../../components/EmbedCodepen.astro";
import Debug from "../../components/Debug.astro";

// layout
import Layout from "../../layouts/BaseLayout.astro";

// astro props
interface Props extends CollectionPaginationProps {
  collection: CollectionEntry<"snippets">;
}

export async function getStaticPaths() {
  const collectionSnippets = (await getCollection("snippets", ({ data }) => {
    return data.isDraft !== true;
  })) as CollectionEntry<"snippets">[];

  collectionSnippets.sort((a, b) => {
    const objA: Date = new Date(a.data.pubDate);
    const objB: Date = new Date(b.data.pubDate);

    return objB.getTime() - objA.getTime();
  });

  return collectionSnippets.map((entry, index) => ({
    params: { slug: entry.slug },
    props: {
      index: index,
      collection: entry,
      total: collectionSnippets.length,
      prev: index - 1 >= 0 ? collectionSnippets[index - 1] : null,
      next:
        index + 1 <= collectionSnippets.length
          ? collectionSnippets[index + 1]
          : null,
    },
  }));
}

const { collection } = Astro.props;

// do stuff
const { Content } = await collection.render();

const layoutProps = {
  locale: collection.data?.locale as keyof typeof Intl.Locale,
  title: collection.data.title,
  description: collection.data?.description,
};
---

<Layout {...layoutProps}>
  <Header
    slot="header"
    title={layoutProps.title}
    description={layoutProps.description}
  />

  <Content />

  {
    collection.data.codepenSlug && (
      <EmbedCodepen slug={collection.data.codepenSlug} />
    )
  }

  <Debug item={collection.data} debug={false} />
</Layout>
