---
// astro
import { getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";

// components
import SocialLink from "./SocialLink.astro";
import Debug from "./Debug.astro";

// env
type AuthorType = {
  slug: string;
  collection: "authors";
};
const SITE_AUTHOR = import.meta.env.SITE_AUTHOR || "sidisinsane";
const DEFAULT_AUTHOR: AuthorType = {
  slug: SITE_AUTHOR,
  collection: "authors",
};
// astro props
interface Props {
  author: AuthorType;
}
const { author = DEFAULT_AUTHOR } = Astro.props;

// do stuff
// 1. Get single entry from given author
/*const currentAuthor = entry.data.author || {
  slug: SITE_AUTHOR,
  collection: "authors",
};*/
const collectionAuthor = (await getEntry(author)) as CollectionEntry<"authors">;

// 2. Filter all non-linkable entries from profile data
type SocialType = Record<string, string>;

let social = {} as SocialType;
let socialLinkKeys = [] as string[];
let socialCount = 0;

if (collectionAuthor?.data) {
  social = Object.fromEntries(
    Object.entries(collectionAuthor?.data).filter(
      ([key]) => !["isDraft", "name", "alias"].includes(key),
    ),
  ) as SocialType;

  if (social) {
    socialCount = Object.entries(social).length as number;
    socialLinkKeys = Object.keys(social).filter(
      (key) => key !== "email",
    ) as string[];
  }
}
const linksCountChar = "·";
const linksCount = linksCountChar.repeat(socialCount);
---

<div class="social" style=`--links-count: "${linksCount}";`>
  <nav class="social__navigation">
    {
      social &&
        socialLinkKeys &&
        socialLinkKeys.map((key) => (
          <SocialLink service={key} alias={social[key]} />
        ))
    }
  </nav>

  {
    collectionAuthor?.data?.email && (
      <p class="email">{collectionAuthor?.data?.email}</p>
    )
  }
</div>

<!-- {social && <Debug item={social} />} -->

<style>
  .social {
    --links-count: "·";

    color: var(--fg);
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: flex-start;
    column-gap: calc(var(--gap) / 3);
    row-gap: calc(var(--gap) / 4);
  }

  .social__navigation {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: calc(var(--gap) / 3);
  }

  .social__navigation::before {
    content: var(--links-count);
  }

  a {
    display: flex;
    grid-auto-flow: column;
    align-items: center;
    gap: calc(var(--gap) / 6);
    width: 1.4rem;
    transition: color 0.2s var(--ease-1);
  }

  a:hover {
    color: var(--fg-emphasized);
  }

  svg {
    display: block;
    width: 1.4rem;
    height: auto;
  }
</style>
